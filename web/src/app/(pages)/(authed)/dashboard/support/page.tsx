"use client";

import React, { useState } from 'react';
import { useAuth } from '@/components/global/providers';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { toast } from 'sonner';
import { LifeBuoy, Send, MessageSquare, BadgeDollarSign, Wrench } from 'lucide-react';

const faqItems = [
  {
    question: "How is the Cultural Compatibility Score calculated?",
    answer: "Our score is generated by analyzing millions of data points from Qloo's cultural AI. We compare the taste profiles of the acquirer's and target's audiences across various domains like music, film, TV, and brands to produce a quantifiable measure of alignment."
  },
  {
    question: "What does 'Grounding' do?",
    answer: "Enabling the 'Grounding' option allows our AI agent to perform live web searches using the Tavily API. This enriches the analysis with up-to-the-minute information, corporate profiles, and recent news, providing a more comprehensive report."
  },
  {
    question: "Can I upload my own data for context?",
    answer: "Yes. You can upload PDF, Excel, TXT, or Markdown files. This is useful for providing internal documents, data room files, or specific research that you want the AI to consider during its analysis."
  },
  {
    question: "Is my data secure?",
    answer: "Absolutely. All data is handled with strict confidentiality. We use robust authentication and encryption protocols. Your uploaded documents and report analyses are private to your account."
  }
];

export default function SupportPage() {
  const { accessToken } = useAuth();
  const [category, setCategory] = useState('');
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!category || !subject.trim() || !message.trim()) {
      toast.error("All fields are required.");
      return;
    }
    setIsLoading(true);

    // This endpoint doesn't exist, but we use the relative path pattern for consistency.
    const promise = fetch(`/api/v1/utils/support/ticket`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify({ category, subject, message }),
    }).then(res => {
        if (!res.ok) {
            // Mocking a successful response for the demo
            if(res.status === 404) return {message: 'Ticket submitted successfully! (Demo)'};
            throw new Error('Failed to submit ticket. Please try again later.');
        }
        return res.json();
    });

    toast.promise(promise, {
      loading: 'Submitting your support ticket...',
      success: (data) => {
        setCategory('');
        setSubject('');
        setMessage('');
        return data.message || 'Ticket submitted successfully!';
      },
      error: (err) => err.message,
      finally: () => setIsLoading(false)
    });
  };

  return (
    <div className="grid md:grid-cols-3 gap-6">
      <div className="md:col-span-2">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><LifeBuoy className="h-6 w-6" /> Contact Support</CardTitle>
            <CardDescription>
              Have a question or facing an issue? Fill out the form below and our team will get back to you.
            </CardDescription>
          </CardHeader>
          <form onSubmit={handleSubmit}>
            <CardContent className="space-y-6">
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="category">Category</Label>
                  <Select value={category} onValueChange={setCategory} disabled={isLoading}>
                    <SelectTrigger id="category">
                      <SelectValue placeholder="Select a category..." />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="technical-issue"><Wrench className="mr-2 h-4 w-4" />Technical Issue</SelectItem>
                      <SelectItem value="billing-question"><BadgeDollarSign className="mr-2 h-4 w-4" />Billing Question</SelectItem>
                      <SelectItem value="feature-request"><MessageSquare className="mr-2 h-4 w-4" />Feature Request</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                 <div className="space-y-2">
                  <Label htmlFor="subject">Subject</Label>
                  <Input 
                    id="subject" 
                    placeholder="e.g., Report generation failed" 
                    value={subject}
                    onChange={(e) => setSubject(e.target.value)}
                    disabled={isLoading}
                  />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="message">Message</Label>
                <Textarea 
                  id="message" 
                  placeholder="Please describe your issue in detail..." 
                  className="min-h-[150px]"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  disabled={isLoading}
                />
              </div>
               <div className="flex justify-end">
                <Button type="submit" disabled={isLoading}>
                    {isLoading ? "Submitting..." : "Submit Ticket"}
                    <Send className="ml-2 h-4 w-4" />
                </Button>
            </div>
            </CardContent>
          </form>
        </Card>
      </div>
      <div className="md:col-span-1">
        <Card>
          <CardHeader>
            <CardTitle>FAQs</CardTitle>
            <CardDescription>Quick answers to common questions.</CardDescription>
          </CardHeader>
          <CardContent>
            <Accordion type="single" collapsible className="w-full">
              {faqItems.map((item, index) => (
                <AccordionItem value={`item-${index}`} key={index}>
                  <AccordionTrigger>{item.question}</AccordionTrigger>
                  <AccordionContent className="text-muted-foreground">
                    {item.answer}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}